import pandas as pd
import geopandas as geopd
import src.features.areal_interpolation as areal
import numpy as np
import argparse
pd.options.mode.chained_assignment = None

def prep_SVI(SVI): 
    """Drops unneed columns and replaces missing values with median for SVI scores"""
    
    SVI = SVI[["FIPS", "SPL_THEMES", "SPL_THEME1", "SPL_THEME2", "SPL_THEME3", "SPL_THEME4"]]
    
    # Set missing values (coded -999) to median - could be improved by setting to regional medians but not a big deal because there aren't that many
    ## TO DO set as NA
    SVI.loc[SVI.SPL_THEMES < 0, "SPL_THEMES"] = np.median(SVI.SPL_THEMES)
    SVI.loc[SVI.SPL_THEME1 < 0, "SPL_THEME1"] = np.median(SVI.SPL_THEME1)
    SVI.loc[SVI.SPL_THEME2 < 0, "SPL_THEME2"] = np.median(SVI.SPL_THEME2)
    SVI.loc[SVI.SPL_THEME3 < 0, "SPL_THEME3"] = np.median(SVI.SPL_THEME3)
    SVI.loc[SVI.SPL_THEME4 < 0, "SPL_THEME4"] = np.median(SVI.SPL_THEME4)
    
    return SVI


def prep_geo(census_geo, polygons, crs): 
    """Standardizes crs between polygons, census tracts, and adds needed area value to census data"""
    
    census_geo = census_geo.to_crs(crs)
    polygons = polygons.to_crs(crs)
    
    census_geo = areal.calculate_census_areas(census_geo)
    
    return census_geo, polygons

def aggregate_LODES_at_tract(LODES):
    """Groups LODES data by tract rather than block so it can be merged with SVI data"""
    
    LODES["w_GEOID"] = LODES["w_geocode"].astype(str).str.slice(start = 0, stop = 11)
    LODES["h_GEOID"] = LODES["h_geocode"].astype(str).str.slice(start = 0, stop = 11)
    
    return LODES.groupby(["w_GEOID", "h_GEOID"]).agg(total_jobs = ("S000", "sum")).reset_index()

def polygons_to_home_tracts(polygons, census_geo, LODES_tract, crs, polygon_id):
    """"""
    
    intersection_weights = areal.calculate_areal_weights(polygons, census_geo, polygon_id)
    
    LODES_weights = LODES_tract.merge(intersection_weights, how='left', left_on = "w_GEOID", right_on = "GEOID")
    LODES_weights = LODES_weights[LODES_weights[polygon_id].notna()]
    LODES_weights["jobs_interpolated"] = LODES_weights["intersection_weight"] * LODES_weights["total_jobs"]
    
    # Groups home tracts by polygon and sums up jobs in each tract, accounting for areal weights defined at the work tract level
    polygon_home_tracts = (LODES_weights
                           .groupby([polygon_id, "h_GEOID"])
                           .agg(jobs_interpolated = ("jobs_interpolated", "sum"))
                           .reset_index())
    
    return polygon_home_tracts

def polygon_SVI_weights(polygon_home_tracts, svi, polygon_id): 
    """Takes output of polygons_to_home_tracts() and joins to SVI, then calculates weights for aggregation"""
    svi['FIPS'] = svi['FIPS'].astype(str)
    polygons_SVI = polygon_home_tracts.merge(svi, left_on = "h_GEOID", right_on = "FIPS")
    
    polygon_denoms = polygons_SVI.groupby(polygon_id).agg(job_weight_denom = ("jobs_interpolated", "sum")).reset_index()
    polygons_SVI = polygon_denoms.merge(polygons_SVI)
    
    # All weights add up to 1 within groups to make it easy to calculate weighted mean
    polygons_SVI["jobs_weight"] = polygons_SVI["jobs_interpolated"] / polygons_SVI["job_weight_denom"] 
    
    return polygons_SVI

def aggregate_SVI_to_polygons(polygons_SVI, polygon_id):
    """Uses weights to calculate weighted means for each SVI measure and output final dataset"""
    
    polygons_SVI["SPL_THEMES_weight"] = polygons_SVI["SPL_THEMES"] * polygons_SVI["jobs_weight"]
    polygons_SVI["SPL_THEME1_weight"] = polygons_SVI["SPL_THEME1"] * polygons_SVI["jobs_weight"]
    polygons_SVI["SPL_THEME2_weight"] = polygons_SVI["SPL_THEME2"] * polygons_SVI["jobs_weight"]
    polygons_SVI["SPL_THEME3_weight"] = polygons_SVI["SPL_THEME3"] * polygons_SVI["jobs_weight"]
    polygons_SVI["SPL_THEME4_weight"] = polygons_SVI["SPL_THEME4"] * polygons_SVI["jobs_weight"]
    
    out = polygons_SVI.groupby(polygon_id).agg(SVI_total = ("SPL_THEMES_weight", "sum"),
                                    SVI_SES = ("SPL_THEME1_weight", "sum"),
                                    SVI_household = ("SPL_THEME2_weight", "sum"),
                                    SVI_race = ("SPL_THEME3_weight", "sum"),
                                    SVI_housing_transport = ("SPL_THEME4_weight", "sum")).reset_index()
    
    return out

def get_worker_svi(lodes, svi, census_geo,polygons, polygon_id_col, crs):
    
    print("prep SVI")
    svi = prep_SVI(svi)
    print("prep LODES")
    LODES_tract = aggregate_LODES_at_tract(lodes)
    print("prep census")
    census_geo, polygons = prep_geo(census_geo, polygons, crs)
    
    print("get interpolated jobs")
    polygon_home_tracts = polygons_to_home_tracts(polygons, census_geo, LODES_tract, crs, polygon_id_col)
    print("merge SVI")
    polygons_SVI = polygon_SVI_weights(polygon_home_tracts, svi, polygon_id_col)
    print("aggregate SVI")
    out = aggregate_SVI_to_polygons(polygons_SVI, polygon_id_col)
    
    return out

def main():
    parser = argparse.ArgumentParser("Process stops")
    parser.add_argument("--LODES_path", required=True)
    parser.add_argument("--SVI_path", required=True)
    parser.add_argument("--census_geo_path", required=True)
    parser.add_argument("--polygon_path", required=True)
    parser.add_argument("--polygon_id", required=True)
    parser.add_argument("--crs", required=True)
    parser.add_argument("--output_path", required=True)
    
    opts = parser.parse_args()
    LODES_path = opts.LODES_path
    SVI_path = opts.SVI_path
    census_geo_path = opts.census_geo_path
    polygon_path = opts.polygon_path
    polygon_id = opts.polygon_id
    crs = opts.crs
    output_path = opts.output_path
    
    LODES = pd.read_csv(LODES_path)
    SVI = pd.read_csv(SVI_path, dtype = {"FIPS" : "str"})
    census_geo =  geopd.read_file(census_geo_path )
    polygons = geopd.read_file(polygon_path)

    out = get_worker_svi(LODES,SVI, census_geo, polygons,polygon_id, crs)
    
    out.to_csv(output_path)

if __name__ == "__main__":
    main()
    
# python3 -m analysis.src.features.jobs_vulnerability --LODES_path "/home/data/census/nyc/LODES/ny_od_main_JT01_2019.csv" --SVI_path "/home/data/social_vulnerability_index/SVI2020_US.csv" --census_geo_path "/home/data/census/nyc/geo/tracts.geojson" --polygon_path "https://data.cityofnewyork.us/api/geospatial/r8nu-ymqj?method=export&format=GeoJSON" --polygon_id "school_dist" --crs "EPSG:2263" --output_path "test.csv"  